8-28:
    git clone 版本库地址 //把版本库从远程复制到本地 
    git remote -v //查看远程版本库地址 
    git status //查看git状态 
    git add .修改的文件 // .：全部文件 =>某个文件  (从红色状态变绿)
    git commit -m '提交的描述信息' 
    git push //提交远程版本库 
    Git pull //拉取远程版本库
    git reset HEAD <file>... //撤销暂存的修改
    git checkout <file> // 撤销commit   // 切换分支
----------------------------------------------------------------------------------------------------

8-29:
    @click  v-on:click.stop = "指令表达式 1+1  2指令的value"
        v-on : 指令名
        click: 指令参数
        stop : 指令修饰符(修饰符可以链式使用)
            
    click修饰符
        .stop === stopPropagation
        .prevent === preventDetault
        .capture 添加事件时使用事件捕获模式
        .once 事件只执行一次
        .self  点击自身

        .capture和.self的区别：
            .capture先执行父级的函数，再执行子级的触发函数(一般用法),即是给元素添加一个监听器,当元素发生冒泡时,先触发带有该修饰符的元素.若有多个该修饰符,则由外而内触发.
            .self是只执行子级本身的函数

    model修饰符
        v-model  
        .number   转换为数字类型
        .lazy  默认input事件触发、  =》 change触发
        .trim  格式、把前后空格去掉

    键盘修饰符
        数字     keyCode
        .enter   keyName

    事件对象 ： 用$event来传递

    计算属性缓存(computed)和方法(methods)的区别:
        计算属性是基于它们的响应式依赖进行缓存的只在相关响应式依赖发生改变时它们才会重新求值.相比之下，每当触发重新渲染时,调用方法总是会再次执行函数

    var a = Vue.set(arr,0,'xyz');
    Vue.set = this.$set
    全局的set方法    
        Vue.set(vm.obj, key, newValue)；
    实例的$set方法  
        this.$set(this.arr,下标,newdata)

    splice();   参数：起始位置，长度，value

    Object.assign    es6新增，对象深拷贝
        vm.obj = Object.assign({}, vm.obj, newObj);
    1、复制时新创建的对象
    2、3、要合并在一起的对象
    

    computed:
        computed是个函数的返回值,必须有data参与,一定要注意使用场景
        computed直接定义函数是get的一个简写形式,是由get和set两个钩子函数定义的(set有一个参数来接收computed修改的值)

        computed展开写法:
            he:{
                get(){
                    return 表达式
                    eg:return this.jiashu1 + this.jiashu2
                },
                set(value){
                    console.log(value)
                    eg:this.jiashu1 = value
                }
            }

    watch:
        watch的监听直接定义函数其实是handler简写  
        he:{
            handler(newvalue,oldvalue){
                console.log(he)
            }
        }
        如果要监听对象的某个key值  obj.key
        deep:true属性能深度检测到对象的改变,默认false
        vue的实例方法$watch是没有全局方法的  Vue.$watch(expOrFn,callback,[options]) $watch可以监听一个函数，其实是监听了函数的返回值

        eg:
            obj:{
                deep:true,
                handler(v){
                    console.log(v1,v2);
                }
            }

-----------------------------------------------------------------------------------------------------------------------------------
8-30：
    directive:
            全局方法 directive
            v-on:click.slef=""
            Vue.directive('指令名',function(){});
        1、指令名 on show if
            abc   v-abc
            2、钩子函数
            指令是通过一些规则来操作dom的
            钩子函数的第一个参数是dom对象(原生dom对象) el
            钩子函数第二个参数  binding
            指令名、指令参数、指令修饰符、指令表达式、指令的值
            name     arg     modifiers expression   value
        
        钩子函数
            bind()   inserted()  update()
            unbind()  componentUpdated()
            如果定义的指令参数是一个回调函数，
            那表示bind和update的简写
            全局注册指令 在vue挂载点的任何地方可以使用

        eg:
            Vue.directive('color',{
                bind(el,binding,vnode,oldvnode){
                    console.log(vnode);
                    el.style.color= binding.value;
                    if (binding.arg == "某个修饰符") {
                        要执行的表达式
                    }
                },
                inserted(el,binding){
                },
                update(el,binding){
                    el.style.color= binding.value;
                }
            });    
----------------------------------------------------------------------------------------------
9-2:
    filter:
        过滤一条data、computed(数据)
        Vue.filter   Vue.directive
        过滤器  | （管道符）
        computed 与 filter 的异同：
                computed:
                1.不能传参,只能监听预先设置好的值;
                2.值会缓存,在我们要监听的数据没有变化的时候，是不会再去执行对象相应的数据的(性能比较好)
                filters:
                1.将返回数据进行处理后返回处理结果的简单函数
                2.值不会缓存,会重新执行里面的操作

                同:所得到的值都需要return出去
        filter可以动态传入过滤内容
        filter的使用场景： 如果大量数据需要同一种规则改变的话，使用
        filter使用的地方
        {{}}   /  动态bind的引号里
        filter可以传参
        data | filtername('filterArg1','filterArg2',...)
        接受参数就是通过filter的第二参数，以此类推
        第一个参数是要过滤的值
        filter可以串联使用（链式调用）
        data | filtername() | filtername 
        eg:
        filters: {
            CNuppercase: function (val) {
                var CN_list = ['', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖'];
                var CN_lisp = ['元整', '拾', '佰', '仟', '万', '拾', '佰', '仟', '亿'];
                var str = val.toString();
                var CN = '';
                for (var i = 0; i < str.length; i++) {
                    CN += CN_list[Number(str.charAt(i))] + CN_lisp[str.length - i - 1];
                }
                return CN;
            }
        },

        Vue.filter('test',function(val,arg1){
            return val+1;
        });
-------------------------------------------------------------------------------------------------------                   
9-3:
    component：
        组件之间的传值
        父组件与子组件
        谁使用了组件，谁就是父组件，被使用的就是子组件。
        父组件向子组件传值
        1、子组件需要同意： props
        2、父组件如何通过props传入值
        子组件怎么告诉父组件做了什么?
        $emit(自定义事件)
        1、子组件向父组件发送自定义事件
        2、父组件需要监听子组件的事件
        props: ['自定义属性名']
        $emit('自定义事件名',事件参数)     
        $event 来接受事件参数

        eg:
            <div id="app">
                <test :title="1+1+1" :value="10" @jiajia="alert($event)"></test>
            </div>

            Vue.component('test',{
                template:`<h1>
                {{title}}
                <button @click="jia">btn{{msg}}</button>
                </h1>`,
                data(){
                    return {
                        msg:this.value
                    }
                },
                props:['title','value'],
                methods: {
                    jia(){
                        this.msg ++;
                        this.$emit('jiajia',this.msg);
                    },
                    input(){
                        this.$emit('input')
                    }
                },
            });
    组件插槽：
        组件插槽 slot
        具名插槽 slot  name
        v-slot:插槽名 （template or component）
        默认插槽，未指定名字的内容都会统一放入到默认插槽里
        默认插槽 默认名字：default
        动态组件  <component> 
        <component> 通过is=“组件名||组件的选项对象”属性指向组件
        eg:
            Vue.component('test',{
                template: "#test",
                data() {
                    return {
                        msg:'0000000'
                    }
                },
            });
------------------------------------------------------------------------------------------------------------------------
9-4:
    组件prop验证:
        组件的命名规则: 使用必须都是小写
                      定义： 驼峰形式、短杠形式（kebab-case或者PascalCase）
        因为一个单词可能会跟原生dom标签冲突
        kebab-case或者PascalCase   => 全部小写，驼峰形式就会加杠

        prop的命名规则(同上) 

        事件命名 ： 必须是kebab-case形式命名，全部小写

        props 通过数组来传递只能定义属性名， （很low）
        验证： 
        type：Number string object、array function boolean Date Symbol()
        required : true false
        validator:  回调函数 return（true false）
        default : 默认值，如果是array、object的话，必须是函数返回值

        动态绑定特性值
             1、引用类型时，子组件中更改相应的属性会导致父组件相应属性的更改
             2、基本类型时，子组件中更改这个属性会报错，加上.sync修饰符 但是：一般来说，是不建议在子组件中对父组件中传递来的属性进行操作的
             1、基本类型值，在子组件中创建一个新的data或computed，并以传递进来的值进行初始化，之后就可以操作这个新的属性了
             2、引用类型值，最好是对引用类型进行复制。复杂的情况，肯定应该是深复制

        eg:
            props:{
                value:{
                    type: Number, 
                    required: true,
                    validator: function(v){
                        return v%2 == 0
                    },
                    default:function(){
                        return {
                            a:1
                        }
                    },
                },
            }     
    组件（高级）:
        在自定义组件里，不带参数的 v-bind，
        相当于传入一个对象的所有属性
        v-model :value + @input
        组件里的model含义：
        相当于把value 属性改为 prop的值
        把input事件改为 event对应的值
        非prop类型的属性:会采用覆盖策略替换掉已有的属性
        class、style除外。 ： 采用的合并策略
        禁用特性inheritAttrs: false
        插槽作用域
            <template v-slot:a="b">c</template>
            b: {a:{},b:{}}    <slot name="a" :a :b></slot>

        inheritAttrs:false, 是否继承属性        
----------------------------------------------------------------------------------------------------------------
9-5:
    组件的实例属性：
        $refs: 来存储dom对象或者实例对象
        $children 返回一个vueComponent数组
        $parent 返回一个vueComponent节点||组件||实例
        $root 返回vue根实例
        $nextTick 局部的updated
-------------------------------------------------------------------------------------------------------------------
9-6:
    过渡 动画:
        过渡动画组件：<transition></transition>
        eg:
            <button @click="isshow = !isshow">btn</button>
            <transition name="v">
                <div class="box" v-show="isshow"></div>
            </transition>
            .v-leave{}
            .v-leave-active{}
            .v-leave-to{}
            .v-enter{}
            .v-enter-active{}
            .v-enter-to{}


        <transition-group></transition-group>
            会默认生成span标签 tag设置默认标签
            里面的子元素必须有唯一的key
            eg:
                <transition-group tag="ul" move  enter-active-class="rotateIn animated" leave-active-class="rotateOut animated">
                    <li v-for="item in arr" :key="item">
                        {{item}}
                    </li>
                </transition-group>

        vue过渡必须发生在单个元素的状态切换上
         v-if  v-show component（动态组件） <router-view>
        类名的定义： name + -enter enter-to enter-active
                           -leave -leave-to -leave-active

        appear  首次出现应用动画过渡

        mode : 必须是两个元素在切换
        out-in   in-out   先进后出   先出后进

        duration  持续时间

        第三方动画库

        添加transition属性： enter-active-class  leave-active-class
--------------------------------------------------------------------------------------------------------
9-9:
    router:
        1、创建路由实例  new VueRouter
        2、配置路由routes
        3、注册路由 router：router
        4、定义router-view 来渲染匹配到的组件
        eg:
            <router-link to="/abc">abc</router-link>
            <router-link :to="{path:'/abc'}">abc</router-link>
            <router-link to="/ddd">ddd</router-link>
            <router-view></router-view>

            var abc = {
                template:'<h1>abc</h1>'
            }
            var ddd = {
                template:'<h1>ddd</h1>'
            }
            var router = new VueRouter({
                routes: [
                    {
                        path:'/abc',
                        component:abc
                    },
                    {
                        path:'/ddd',
                        component:ddd
                    }
                ]
            })

            var vm = new Vue({
                el:".conetnt",
                router,
            })

        vue-router是通过#锚点来模拟页面跳转的   hash模式
                                              histroy模式   更像真实的url地址

        通过router-link to属性来跳转
            字符串路径 : '/abc'
            对象：   {path: '/abc'}
        编程式跳转： 实例方法： this.$router.push()
            字符串路径 : push('/abc')
            对象：   push({path: '/abc'})

        router实例
            name 路由名字，可以通过name来跳转路由
            components 可以通过name来渲染多个不同组件
            redirect 重定向到新的地址下
            alias： 地址的别名/ 也需要定义成路径格式

            children 嵌套路由、组件渲染到父级router-view上，
                路由path配置不需要加 /  

            动态路由：
            在path上定义：+ 匹配的key 在params上可以展示动态路由匹配到的参数 可以串连

            * 通配符   
            路由配置是有优先级关系的（从上到下）一般用于 404页面   通常放到路由配置的最下面    

            eg:
                <router-view name="test2"></router-view>
                const router = new VueRouter({
            routes:[
                {
                    path:'/test/:id/:name',
                    component: test1,
                    components: {
                        'test1': test1,
                        'test2': test2,
                    },
                    redirect: '/abcd',
                    alias: ['/laowang','/laoli'],
                    children:[
                        {
                            path:'abc',
                            component: abc,
                            children:[
                                {
                                    path:'ddd',
                                    component: ddd    
                                }
                            ]
                        }
                    ],
                    name: 'test'
                },{
                    path: '/*',
                    component: notfound

                }
            ]
        })
-----------------------------------------------------------------------------------------------------------------------
9-10:
    路由：
        路由通过query来传参
            1、to="/abc?xyz=123"
            2、:to="{path:'/abc',query:{xyz:1}}"
            3、 $router.push('/abc?xyz=123')
            3、 $router.push({path:'/abc',query:{xyz:1}})
        params传参
            1、:to="{name:,params:{}}"
            2、 $router.push({name:,params:{}})
        注： 如果要用params 传参的话必须用name跳转


        router-link-active: 连接激活时添加的类名，可以通过active-class属性设置
        replace属性： $router.replace()
        无属性的的话： $router.push();

        router.push     跳转添加历史记录
        router.replace  跳转不添加历史记录
        router.go       跳转到某一条记录
        router.back  返回
        router.forward  前进

        router.addRoutes  动态添加路由配置